import random
import os
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import pyttsx3
import ttkbootstrap as ttk
from ttkbootstrap.constants import *

# –ü–æ–ª–Ω—ã–π –∞–ª—Ñ–∞–≤–∏—Ç —Å —Å–æ—Ñ–∏—Ç–∞–º–∏ + –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è "—Å—Ç—Ä–æ—á–Ω—ã—Ö"
HEBREW = [
    ("◊ê", "–∞–ª–µ—Ñ", "–Ω–µ—Ç –∑–≤—É–∫–∞ / '–∞'", "alef.png"),
    ("◊ë", "–±–µ—Ç", "–± / –≤", "bet.png"),
    ("◊í", "–≥–∏–º–µ–ª", "–≥", "gimel.png"),
    ("◊ì", "–¥–∞–ª–µ—Ç", "–¥", "dalet.png"),
    ("◊î", "—Ö—ç–π", "—Ö / 'h'", "hey.png"),
    ("◊ï", "–≤–∞–≤", "–≤ / —É", "vav.png"),
    ("◊ñ", "–∑–∞–∏–Ω", "–∑", "zayin.png"),
    ("◊ó", "—Ö–µ—Ç", "—Ö", "chet.png"),
    ("◊ò", "—Ç–µ—Ç", "—Ç", "tet.png"),
    ("◊ô", "–π–æ–¥", "–π / –∏", "yod.png"),
    ("◊õ", "–∫–∞—Ñ", "–∫", "kaf.png"),
    ("◊ö", "–∫–∞—Ñ —Å–æ—Ñ–∏—Ç", "–∫", "kaf_sofit.png"),
    ("◊ú", "–ª–∞–º–µ–¥", "–ª", "lamed.png"),
    ("◊û", "–º–µ–º", "–º", "mem.png"),
    ("◊ù", "–º–µ–º —Å–æ—Ñ–∏—Ç", "–º", "mem_sofit.png"),
    ("◊†", "–Ω—É–Ω", "–Ω", "nun.png"),
    ("◊ü", "–Ω—É–Ω —Å–æ—Ñ–∏—Ç", "–Ω", "nun_sofit.png"),
    ("◊°", "—Å–∞–º–µ—Ö", "—Å", "samekh.png"),
    ("◊¢", "–∞–π–Ω", "–Ω–µ—Ç –∑–≤—É–∫–∞ / '–∞'", "ayin.png"),
    ("◊§", "–ø–µ–π", "–ø / —Ñ", "pey.png"),
    ("◊£", "–ø–µ–π —Å–æ—Ñ–∏—Ç", "–ø / —Ñ", "pey_sofit.png"),
    ("◊¶", "—Ü–∞–¥–∏", "—Ü", "tsadi.png"),
    ("◊•", "—Ü–∞–¥–∏ —Å–æ—Ñ–∏—Ç", "—Ü", "tsadi_sofit.png"),
    ("◊ß", "–∫—É—Ñ", "–∫", "kuf.png"),
    ("◊®", "—Ä–µ—à", "—Ä", "resh.png"),
    ("◊©", "—à–∏–Ω", "—à / —Å", "shin.png"),
    ("◊™", "—Ç–∞–≤", "—Ç", "tav.png"),
]

# –î—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è "—Å—Ç—Ä–æ—á–Ω—ã—Ö" (–≤–∏–∑—É–∞–ª—å–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã, –Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)
HEBREW += [(l.lower(), name + " (—Å—Ç—Ä–æ—á–Ω–∞—è)", sound, img) for l, name, sound, img in HEBREW]


class HebrewTrainer:
    def __init__(self, root):
        self.root = root
        self.root.title("–¢—Ä–µ–Ω–∞–∂—ë—Ä –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏–≤—Ä–∏—Ç–∞")
        self.root.geometry("600x600")

        # –û–∑–≤—É—á–∫–∞
        self.engine = pyttsx3.init()
        self.engine.setProperty('rate', 150)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.correct = 0
        self.total = 0

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
        self.next_letter()

    def setup_ui(self):
        self.main_frame = ttk.Frame(self.root, padding=20)
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        ttk.Label(
            self.main_frame,
            text="–¢—Ä–µ–Ω–∞–∂—ë—Ä –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏–≤—Ä–∏—Ç–∞",
            font=('Helvetica', 20, 'bold'),
            bootstyle=PRIMARY
        ).pack(pady=10)

        self.image_label = ttk.Label(self.main_frame)
        self.image_label.pack(pady=10)

        self.letter_label = ttk.Label(
            self.main_frame,
            text="",
            font=('Helvetica', 40, 'bold'),
            bootstyle=INFO
        )
        self.letter_label.pack(pady=10)

        self.entry = ttk.Entry(self.main_frame, font=('Helvetica', 14))
        self.entry.pack(pady=5)

        self.check_button = ttk.Button(
            self.main_frame,
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            bootstyle=SUCCESS,
            command=self.check_answer
        )
        self.check_button.pack(pady=5)

        self.sound_button = ttk.Button(
            self.main_frame,
            text="üîä –û–∑–≤—É—á–∏—Ç—å",
            bootstyle=SECONDARY,
            command=self.say_letter
        )
        self.sound_button.pack(pady=5)

        self.score_label = ttk.Label(
            self.main_frame,
            text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ: 0 | –í—Å–µ–≥–æ: 0",
            font=('Helvetica', 12),
            bootstyle=SECONDARY
        )
        self.score_label.pack(pady=10)

        # –ü–æ–¥–ø–∏—Å—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        ttk.Label(
            self.main_frame,
            text="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ê–Ω—Ç–æ–Ω –•–∞—Ä—á–µ–≤—Å–∫–∏–π",
            font=('Helvetica', 14),
            bootstyle=SECONDARY
        ).pack(side=tk.BOTTOM, anchor='se', pady=5, padx=10)

    def next_letter(self):
        self.current_letter = random.choice(HEBREW)
        letter, name, sound, image_file = self.current_letter
        self.letter_label.config(text=letter)

        if os.path.exists(image_file):
            img = Image.open(image_file)
            img = img.resize((150, 150))
            self.photo = ImageTk.PhotoImage(img)
            self.image_label.config(image=self.photo)
        else:
            self.image_label.config(image="", text="(–ù–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏)")

        self.entry.delete(0, tk.END)

    def check_answer(self):
        answer = self.entry.get().strip().lower()
        correct_answer = self.current_letter[1].lower()

        self.total += 1
        if answer == correct_answer:
            self.correct += 1
            messagebox.showinfo("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!", "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.current_letter[1]}")

        self.update_score()
        self.next_letter()

    def update_score(self):
        self.score_label.config(text=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {self.correct} | –í—Å–µ–≥–æ: {self.total}")

    def say_letter(self):
        self.engine.say(self.current_letter[0])
        self.engine.runAndWait()


if __name__ == "__main__":
    root = ttk.Window(themename="minty")
    app = HebrewTrainer(root)
    root.mainloop()
